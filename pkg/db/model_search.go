// Code generated by mfd-generator v0.4.0; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"github.com/go-pg/pg/v10"
	"github.com/go-pg/pg/v10/orm"
)

const condition = "?.? = ?"

// base filters
type applier func(query *orm.Query) (*orm.Query, error)

type search struct {
	appliers []applier
}

func (s *search) apply(query *orm.Query) {
	for _, applier := range s.appliers {
		query.Apply(applier)
	}
}

func (s *search) where(query *orm.Query, table, field string, value interface{}) {
	query.Where(condition, pg.Ident(table), pg.Ident(field), value)
}

func (s *search) WithApply(a applier) {
	if s.appliers == nil {
		s.appliers = []applier{}
	}
	s.appliers = append(s.appliers, a)
}

func (s *search) With(condition string, params ...interface{}) {
	s.WithApply(func(query *orm.Query) (*orm.Query, error) {
		return query.Where(condition, params...), nil
	})
}

// Searcher is interface for every generated filter
type Searcher interface {
	Apply(query *orm.Query) *orm.Query
	Q() applier

	With(condition string, params ...interface{})
	WithApply(a applier)
}

type MessageSearch struct {
	search

	ID        *int
	Text      *string
	IDs       []int
	TextILike *string
}

func (ms *MessageSearch) Apply(query *orm.Query) *orm.Query {
	if ms == nil {
		return query
	}
	if ms.ID != nil {
		ms.where(query, Tables.Message.Alias, Columns.Message.ID, ms.ID)
	}
	if ms.Text != nil {
		ms.where(query, Tables.Message.Alias, Columns.Message.Text, ms.Text)
	}
	if len(ms.IDs) > 0 {
		Filter{Columns.Message.ID, ms.IDs, SearchTypeArray, false}.Apply(query)
	}
	if ms.TextILike != nil {
		Filter{Columns.Message.Text, *ms.TextILike, SearchTypeILike, false}.Apply(query)
	}

	ms.apply(query)

	return query
}

func (ms *MessageSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		if ms == nil {
			return query, nil
		}
		return ms.Apply(query), nil
	}
}
